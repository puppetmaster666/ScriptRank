// firestore.rules - COMPLETE FILE
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // ============================================
    // USERS COLLECTION
    // ============================================
    match /users/{userId} {
      // Anyone authenticated can read user profiles (for public profiles)
      allow read: if true;
      
      // Users can write their own profile
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    // ============================================
    // IDEAS COLLECTION  
    // ============================================
    match /ideas/{ideaId} {
      // Anyone can read ideas (for public leaderboard)
      allow read: if true;
      
      // Only authenticated users can create ideas
      allow create: if request.auth != null 
        && request.resource.data.userId == request.auth.uid
        && validateIdeaData();
      
      // FIXED: Allow authenticated users to update publicScore OR owners to update other fields
      allow update: if request.auth != null 
        && (
          // Either the owner updating non-score fields
          (request.auth.uid == resource.data.userId
           && !('aiScores' in request.resource.data.diff(resource.data).affectedKeys())
           && !('aiScore' in request.resource.data.diff(resource.data).affectedKeys())
           && !('publicScore' in request.resource.data.diff(resource.data).affectedKeys()))
          // OR any authenticated user updating ONLY publicScore (for voting)
          || (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['publicScore']))
        );
      
      // Users can delete their own ideas
      allow delete: if request.auth != null && request.auth.uid == resource.data.userId;
      
      function validateIdeaData() {
        let data = request.resource.data;
        return data.keys().hasAll(['userId', 'title', 'type', 'content'])
          && data.type in ['movie', 'game', 'business', 'entertainment']
          && data.title is string 
          && data.title.size() >= 1 
          && data.title.size() <= 200
          && data.content is string 
          && data.content.size() >= 10 
          && data.content.size() <= 5000
          && data.userId is string;
      }
    }
    
    // ============================================
    // VOTES COLLECTION
    // ============================================
    match /votes/{voteId} {
      // Anyone can read votes
      allow read: if true;
      
      // Only authenticated users can create votes
      allow create: if request.auth != null 
        && request.resource.data.userId == request.auth.uid
        && voteId == (request.auth.uid + '_' + request.resource.data.ideaId)
        && validateVoteData();
      
      // Users cannot update or delete votes (permanent)
      allow update, delete: if false;
      
      function validateVoteData() {
        let data = request.resource.data;
        return data.keys().hasAll(['userId', 'ideaId', 'score']) 
          && data.score is number 
          && data.score >= 0 
          && data.score <= 10
          && data.userId is string
          && data.ideaId is string;
      }
    }
    
    // ============================================
    // NOTIFICATIONS COLLECTION
    // ============================================
    match /notifications/{notificationId} {
      // Users can only read their own notifications
      allow read: if request.auth != null && request.auth.uid == resource.data.userId;
      
      // System can create notifications (via Cloud Functions or admin)
      allow create: if request.auth != null;
      
      // Users can update their own notifications (mark as read)
      allow update: if request.auth != null && request.auth.uid == resource.data.userId;
      
      // Users can delete their own notifications
      allow delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    
    // ============================================
    // FOLLOWING COLLECTION (Social Features)
    // ============================================
    match /following/{followId} {
      // Anyone can read follows
      allow read: if true;
      
      // Users can create follows where they are the follower
      allow create: if request.auth != null 
        && request.auth.uid == request.resource.data.followerId
        && followId == (request.resource.data.followerId + '_' + request.resource.data.followedId);
      
      // Users can delete follows where they are the follower
      allow delete: if request.auth != null && request.auth.uid == resource.data.followerId;
    }
    
    // ============================================
    // COMMENTS SUBCOLLECTION
    // ============================================
    match /ideas/{ideaId}/comments/{commentId} {
      // Anyone can read comments
      allow read: if true;
      
      // Authenticated users can create comments
      allow create: if request.auth != null;
      
      // Users can update/delete their own comments
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    
    // ============================================
    // ARCHIVES COLLECTION
    // ============================================
    match /archives/{monthId} {
      // Anyone can read archives (public leaderboard history)
      allow read: if true;
      
      // Only authenticated users can create archives (should be admin only in production)
      allow create: if request.auth != null;
      
      // Archives are permanent - no updates or deletes
      allow update, delete: if false;
    }
    
    // ============================================
    // LEGACY COLLECTIONS (Your old structure)
    // ============================================
    match /movies/{movieId} {
      allow read: if true;
      allow write: if request.auth != null;
    }
    
    match /games/{gameId} {
      allow read: if true;
      allow write: if request.auth != null;
    }
    
    match /business/{businessId} {
      allow read: if true;
      allow write: if request.auth != null;
    }
  }
}
