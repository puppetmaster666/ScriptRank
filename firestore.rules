rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // ============================================
    // USERS COLLECTION
    // ============================================
    match /users/{userId} {
      // Users can read and write their own profile
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // Anyone can read basic user info (for public profiles)
      allow read: if request.auth != null;
    }
    
    // ============================================
    // IDEAS COLLECTION  
    // ============================================
    match /ideas/{ideaId} {
      // Anyone can read ideas (for leaderboard)
      allow read: if true;
      
      // Only authenticated users can create ideas
      allow create: if request.auth != null 
        && request.resource.data.userId == request.auth.uid  // FIXED: Changed from resource.data to request.resource.data
        && validateIdeaData();
      
      // Users can update their own ideas (but not scores)
      allow update: if request.auth != null 
        && request.auth.uid == resource.data.userId  // This is correct for update
        && !('aiScores' in request.resource.data.diff(resource.data).affectedKeys())
        && !('publicScore' in request.resource.data.diff(resource.data).affectedKeys());
      
      // Users can delete their own ideas
      allow delete: if request.auth != null && request.auth.uid == resource.data.userId;
      
      function validateIdeaData() {
        let data = request.resource.data;
        return data.keys().hasAll(['userId', 'username', 'type', 'title', 'content']) // FIXED: Removed 'aiScores' from required fields
          && data.type in ['movie', 'game', 'business']
          && data.title is string 
          && data.title.size() >= 1 
          && data.title.size() <= 100
          && data.content is string 
          && data.content.size() >= 30 
          && data.content.size() <= 2000
          && data.userId is string
          && data.username is string;
      }
    }
    
    // ============================================
    // VOTES COLLECTION
    // ============================================
    match /votes/{voteId} {
      // Anyone can read votes (for vote counts and displays)
      allow read: if true;
      
      // Only authenticated users can create votes
      // Vote ID must be userId_ideaId format
      allow create: if request.auth != null 
        && request.auth.uid == request.resource.data.userId  // FIXED: Changed from resource.data to request.resource.data
        && voteId == (request.auth.uid + '_' + request.resource.data.ideaId)  // FIXED: Same here
        && validateVoteData();
      
      // Users cannot update or delete votes (permanent)
      allow update, delete: if false;
      
      function validateVoteData() {
        let data = request.resource.data;
        return data.keys().hasAll(['userId', 'ideaId', 'score']) 
          && data.score is number 
          && data.score >= 0.01 
          && data.score <= 10.00
          && data.userId is string
          && data.ideaId is string;
      }
    }
    
    // ============================================
    // NOTIFICATIONS COLLECTION
    // ============================================
    match /notifications/{notificationId} {
      // Users can only read their own notifications
      allow read: if request.auth != null && request.auth.uid == resource.data.userId;
      
      // System can create notifications (via Cloud Functions or admin)
      allow create: if request.auth != null;
      
      // Users can update their own notifications (mark as read)
      allow update: if request.auth != null && request.auth.uid == resource.data.userId;
      
      // Users can delete their own notifications
      allow delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    
    // ============================================
    // FOLLOWING COLLECTION (Social Features)
    // ============================================
    match /following/{followId} {
      // Anyone can read follows (for follower counts)
      allow read: if true;
      
      // Users can create follows where they are the follower
      // Follow ID must be followerId_followedId format  
      allow create: if request.auth != null 
        && request.auth.uid == request.resource.data.followerId  // FIXED: Changed from resource.data to request.resource.data
        && followId == (request.resource.data.followerId + '_' + request.resource.data.followedId);  // FIXED: Same here
      
      // Users can delete follows where they are the follower
      allow delete: if request.auth != null && request.auth.uid == resource.data.followerId;
    }
    
    // ============================================
    // PAYMENTS COLLECTION (Admin/Stripe Only)
    // ============================================
    match /payments/{paymentId} {
      // Users can read their own payment records
      allow read: if request.auth != null && request.auth.uid == resource.data.userId;
      
      // Only admin/system can create payment records
      allow create: if false; // Will be created via Cloud Functions/Admin SDK
      
      // No updates or deletes allowed
      allow update, delete: if false;
    }
    
    // ============================================
    // LEGACY COLLECTIONS (Your old structure)
    // ============================================
    // Keep your existing collections working
    match /movies/{movieId} {
      allow read: if true;
      allow write: if request.auth != null;
    }
    
    match /games/{gameId} {
      allow read: if true;
      allow write: if request.auth != null;
    }
    
    match /business/{businessId} {
      allow read: if true;
      allow write: if request.auth != null;
    }
    
    // Generic ideas collection (if you had one)
    match /ideas_old/{ideaId} {
      allow read: if true;
      allow write: if request.auth != null;
    }
    
    // ============================================
    // TEMPORARY DEBUG COLLECTION
    // ============================================
    // Remove this in production - it's just for testing
    match /debug/{document} {
      allow read, write: if request.auth != null;
    }
  }
}
